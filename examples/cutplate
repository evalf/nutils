#! /usr/bin/env python3

from nutils import *


@log.title
def makeplots( domain, geom, sigma, index ):

  sigma_dev = sigma - (function.trace(sigma)/domain.ndims) * function.eye(domain.ndims)
  vonmises = function.sqrt( ( sigma_dev**2 ).sum([0,1]) * 3./2 ) # TODO check fix for 2D

  points, colors = domain.simplex.elem_eval( [ geom, vonmises ], ischeme='bezier5', separate=True )
  with plot.PyPlot( 'solution', index=index ) as plt:
    plt.mesh( points, colors )
    plt.colorbar()
    plt.xlim( 0, 1.3 )
    plt.ylim( 0, 1.3 )


def main( nelems=None, maxrefine=2, radius=.5, degree=1, stress=library.Hooke(lmbda=1,mu=1), plots=True, solvetol=1e-5 ):

  if nelems:
    verts = numpy.linspace( 0, 1, nelems+1 )
    wholedomain, geom = mesh.rectilinear( [verts,verts] )
  else:
    wholedomain, geom = mesh.demo()
    if degree != 1:
      log.warning( 'setting degree=1 for triangular mesh' )
      degree = 1

  # plane strain case (see e.g. http://en.wikiversity.org/wiki/Introduction_to_Elasticity/Plate_with_hole_in_tension)
  x, y = geom / radius
  r2 = x**2 + y**2
  uexact = .2 * geom * ( [1-stress.nu,-stress.nu] + [2-2*stress.nu,2*stress.nu-1]/r2 + (.5-.5/r2)*[x**2-3*y**2,3*x**2-y**2]/r2**2 )

  levelset = function.norm2( geom ) - radius
  domain = wholedomain.trim( levelset, maxrefine=maxrefine )
  complement = wholedomain - domain
  dbasis = domain.basis( 'spline', degree=degree ).vector( 2 )

  cons = domain.boundary['left'].project( 0, geometry=geom, ischeme='gauss6', onto=dbasis[:,0] )
  cons |= domain.boundary['bottom'].project( 0, geometry=geom, ischeme='gauss6', onto=dbasis[:,1] )
  cons |= domain.boundary['top,right'].project( uexact, geometry=geom, ischeme='gauss6', onto=dbasis )

  elasticity = function.outer( dbasis.grad(geom), stress(dbasis.symgrad(geom)) ).sum([2,3])
  matrix = domain.integrate( elasticity, geometry=geom, ischeme='gauss6' )
  lhs = matrix.solve( constrain=cons, tol=solvetol, symmetric=True, precon='diag' )
  disp = dbasis.dot( lhs )

  if plots:
    makeplots( domain, geom+disp, stress(disp.symgrad(geom)), index=nelems )

  error = disp - uexact
  err = numpy.sqrt( domain.integrate( [ (error**2).sum(-1), ( error.grad(geom)**2 ).sum([-2,-1]) ], geometry=geom, ischeme='gauss7' ) )
  log.user( 'errors: l2={}, h1={}'.format(*err) )

  return err, cons, lhs


def conv( degree=1, nrefine=4 ):

  l2err = []
  h1err = []

  for irefine in log.range( 'refine', nrefine ):
    err, cons, lhs = main( nelems=2**(1+irefine), degree=degree )
    l2err.append( err[0] )
    h1err.append( err[1] )

  h = .5**numpy.arange(nrefine)

  with plot.PyPlot( 'convergence' ) as plt:
    plt.subplot( 211 )
    plt.loglog( h, l2err, 'k*--' )
    plt.slope_triangle( h, l2err )
    plt.ylabel( 'L2 error' )
    plt.grid( True )
    plt.subplot( 212 )
    plt.loglog( h, h1err, 'k*--' )
    plt.slope_triangle( h, h1err )
    plt.ylabel( 'H1 error' )
    plt.grid( True )


def unittest():

  retvals = main( nelems=None, degree=2, maxrefine=2, plots=False, solvetol=0 )
  assert debug.checkdata( retvals, '''
    eNplUEmOwzAM+04CWAPttp7TQ679/3EsL0GbAhZIGaYsksqhhewsx8HN2wVeDJUusNLv3q93oep8QX9E
    ool555RPbXD8y7NYwrNYK6WQufIeQBG+eRYYkeVEcFXbo6GxxN2Eo+7ms75/7wAhYulkyNgJt6xbIo1p
    52ErmnA+29YMqydOe1UsVkduQ8iEdSDSRLZpcw182qaWS+ltncQlEZRw/PybAVj3PMgOAmrMEO40oCn6
    VIW2qWKORXRvDYy57uSu4pnPZ1bAy/gdGIhPyVnOf+8ugYc=''' )

  retvals = main( nelems=4, degree=2, maxrefine=2, plots=False, solvetol=0 )
  assert debug.checkdata( retvals, '''
    eNqdUstuxDAI/J1dKVQw5mF/zh5y3f8/1sZO21TJZaVEYA8YmEG2h25iz+3xMIHuFJtwiZ1s63fv13vj
    r99vnP//4CYj/ApzNbvDpNfZSa8xs8SgpS5raWGSliXPUpG4hPvVW9RKxF0DHbQ2wIvBqHLDHeZmcYeZ
    +pFH0tDf9+4w5yVBK6ejiCSNTOwgW0S7W06EU5TJhJamwzblZBQxJu8WUdIuFYDJKuAZL1rzXD1yVo/Z
    waEMUNuK58koz7xSk2nJ/vRHLRTlZZNxiGApMRVxyftPFRTxMkggi5YNU2Oty8Hk7BCVBNUzuHeTr1FI
    TIKr20rPrbaT2tRJXDqsS7KGKVHYGMxOG2Ayeqm9oPKsXMyXfiEz789SECSm8M3h6cCxCtqq/PmiPL8B
    ZyriMA==''' )

  retvals = main( nelems=4, degree=2, maxrefine=3, plots=False, solvetol=0 )
  assert debug.checkdata( retvals, '''
    eNqdU0luwzAM/E4CmAWH4iI9pwdf8/9jZVJp0sK+BLBBysNFnKGx3XSD3bfbzVhlp9jA0neybX57fD82
    /no9x/n/KzxwhJ9hrmZXGMBtJz3HzBITbX1ZSyuGtIw8o0viCPezWjRaxNUFJmjjAE8Go85DrjA3iyvM
    1J95hCGzvk+HOT+SaOd0VCJJI0PVmmQDxxDtD+EUHnpMpio58VBkBYnW0k4n7VJBpFgVKUagPfO694zz
    6Bn3VEZk8IpHMcrFbOt1zvvpr1rSFMtmfQFkKVF5jur7oYLA6AcJZBEpDg1WXY4UZ09RCU0ig6V5skSB
    op+6m1cwZKW/1CZlrwravLrYkOSDwrQS3zagAbNznw2V89egZr70C1TDt6UgwSHKFH44Ip3JbvWZtNcG
    fL4o9x9MxOIe''' )


util.run( main, conv, unittest )
