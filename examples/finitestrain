#! /usr/bin/env python3

from nutils import *


def makeplots( name, domain, geom, sigma ):

  if isinstance( sigma, index.IndexedArray ):
    sigma = sigma.unwrap(geom)
  sigma_dev = sigma - (function.trace(sigma)/domain.ndims) * function.eye(domain.ndims)
  vonmises = function.sqrt( ( sigma_dev**2 ).sum([0,1]) * 3./2 ) # TODO check fix for 2D

  points, colors = domain.simplex.elem_eval( [ geom, vonmises ], ischeme='bezier3', separate=True )
  with plot.PyPlot( name ) as plt:
    plt.mesh( points, colors, triangulate='bezier' )
    plt.colorbar()
    plt.axis( 'equal' )
    plt.clim( 0, 1 )


@log.title
def newton( res, x0, maxiter, tol, lintol, constrain=None ):
  log.info( 'preparing jacobian' )
  var = function.DerivativeHelper( x0.shape, [range(x0.ndim)] )
  Jvar = function.derivative( res(var), var, var.shape )
  replace = lambda f: x0 if f is var else function.edit( f, replace )
  for iiter in log.count( 'iteration' ):
    log.info( 'constructing jacobian' )
    J = replace(Jvar).eval_integrals()
    b = J.matvec(x0) - res(x0).eval_integrals()
    x = J.solve( b, tol=lintol, constrain=constrain )
    residual_norm = numpy.linalg.norm(x-x0)
    log.info('residual norm: {:.5e}'.format(residual_norm))
    if residual_norm < tol:
      return x
    if iiter > maxiter:
      raise Exception( 'newton failed to converge within {} iterations'.format(maxiter) )
    x0 = x


def main( nelems=12, stress=library.Hooke(lmbda=1,mu=1), degree=2, angle=15, restol=1e-8, trim=False, plots=True ):

  _stress = stress
  def stress( epsilon, indices ):
    assert len( indices ) == epsilon.ndim
    align = tuple( map( indices.index, epsilon.indices ) )
    return index.IndexedArray(
      indices,
      lambda geom, epsilon_array: _stress( function.align( epsilon_array, align, len( indices ) ) ),
      ( epsilon, )
    )

  verts = numpy.linspace( 0, 1, nelems+1 )
  domain, geom0 = mesh.rectilinear( [verts,verts] )

  if trim:
    levelset = function.norm2( geom0 - (.5,.5) ) - .2
    domain, complement = domain.trim( levelset, maxrefine=2 )

  dbasis = domain.basis( 'spline', degree=degree ).vector( 2 )

  phi = angle * numpy.pi / 180.
  a = numpy.cos(phi) - 1, -numpy.sin(phi)
  b = numpy.sin(2*phi), numpy.cos(2*phi) - 1
  x, y = geom0
  cons = domain.boundary['left,right'].project( x*(a+y*b), onto=dbasis, ischeme='gauss6', geometry=geom0 )

  E = ( dbasis['jk,l'] + dbasis['jl,k'] ) / 2
  A = dbasis['ik,l'] * stress(E, 'jkl')
  matrix = domain.integrate( A, geometry=geom0, ischeme='gauss6' )

  lhs = matrix.solve( constrain=cons, tol=restol, precon='spilu' )
  disp = dbasis.dot( lhs )
  geom = geom0 + disp

  if plots:
    strain = ( disp['j,k'] + disp['k,j'] ) / 2
    makeplots( 'linear', domain, geom, stress(strain, 'jk').unwrap(geom0) )

  def res( lhs ):
    disp = dbasis.dot(lhs)
    geom = geom0 + disp
    strain = (disp['j,k'] + disp['k,j'] - disp['l,j'] * disp['l,k']) / 2
    return domain.integrate_lazy( dbasis['ij,k'] * stress(strain, 'jk'), geometry=geom, ischeme='gauss9' )

  lhs = newton( res, lhs, maxiter=100, tol=restol, lintol=0, constrain=cons )
  disp = dbasis.dot( lhs )
  geom = geom0 + disp

  if plots:
    strain = (disp['j,k'] + disp['k,j'] - disp['l,j'] * disp['l,k']) / 2
    makeplots( 'finite', domain, geom, stress(strain, 'jk') )

  return lhs


def unittest():

  retvals = main( nelems=4, degree=1, angle=1, plots=False )
  assert debug.checkdata( retvals, '''
    eNpdkAtqhDEIhK+zC7E4vj3Qf/8r7JqkUAqB+UJGR4P1sgV/rxf/rL9HOfKhXMJRD8UywEYDkNFm3ndl
    8EO1TGv7KnW/49vgIV9IrVGSLkzDCK9jUGxDd4+Kp20jXHSM5anbmMrbECyjaumj/wYWE58yAsNnIkrH
    TiSBYDqR3WyS0D7QxeeJ+8A3ZS9AZWIXJnCgcMr7txzgPkNrnDWR5heCL2RcaByo8zfvD7CbUag=''' )

  retvals = main( nelems=4, degree=2, angle=1, plots=False )
  assert debug.checkdata( retvals, '''
    eNplUdltxTAMW+c9wCp0HwNl/xVqyc5PCwQgLVOmxND66CL7rg/+rD+fZtoDsdQ5G0lJH/DFit4oZNxo
    hDJ1FB2dO/VZo0YfWdZIZPiALRKWRiB16QYOxxaktNEWSh3hNNpiMp0GE8FukDQ5LzqPsGRe5OAYrJ6g
    HYzHQZnGgbj0vOjeKCg5qDFO/0PIqlk+tajRkScUYLddyO0hOOvCmweY1gQBRldMHDVX7DWTg1aeLr+j
    7QrGITcvsMAJEGL23KRmzk0Ig8+GTHGJ4CV+K6I3Bc1L/L0KtUvs/ovwvCTfStUhiRPW9xfS8neS''' )


util.run( main, unittest )
