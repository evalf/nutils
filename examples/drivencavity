#! /usr/bin/env python

from nutils import *


@parallel.fork
def makeplots( domain, geom, velo, pres, index ):

  log.context( 'figures' )

  funcsp = domain.splinefunc( degree=2 )
  grad = funcsp.grad( geom )
  laplace = function.outer( grad ).sum()
  vort = velo.grad(geom)[1,0] - velo.grad(geom)[0,1]
  matrix, rhs = domain.integrate( [ laplace, vort * funcsp ], geometry=geom, ischeme='gauss9' )
  cons = domain.boundary.project( 0, onto=funcsp, geometry=geom, ischeme='gauss9' )
  lhs = matrix.solve( rhs, constrain=cons )
  streamfunc = funcsp.dot( lhs )

  xy, uv = domain.elem_eval( [ geom, velo ], ischeme='uniform1', title='flow field', separate=False )
  points, stream, velo, pres, div = domain.elem_eval( [ geom, streamfunc, function.norm2(velo), pres, velo.div(geom) ], ischeme='bezier5', separate=True )

  period = .04
  with plot.PyPlot( 'stream', index=index, ndigits=4 ) as plt:
    from matplotlib import cm
    plt.mesh( points, stream%period, edgecolors='none', triangulate='bezier', cmap=cm.hsv )
    plt.clim( 0, period )
    plt.colorbar()
    plt.xlim( 0, 1 )
    plt.ylim( 0, 1 )

  with plot.PyPlot( 'velo', index=index, ndigits=4 ) as plt:
    plt.mesh( points, velo, edgecolors='none', triangulate='bezier' )
    plt.clim( 0, .9 )
    plt.colorbar()
    plt.quiver( xy[:,0], xy[:,1], uv[:,0], uv[:,1] )
    plt.xlim( 0, 1 )
    plt.ylim( 0, 1 )

  with plot.PyPlot( 'pres', index=index, ndigits=4 ) as plt:
    plt.mesh( points, pres, edgecolors='none', triangulate='bezier' )
    plt.colorbar()
    plt.xlim( 0, 1 )
    plt.ylim( 0, 1 )

  with plot.PyPlot( 'div', index=index, ndigits=4 ) as plt:
    plt.mesh( points, div, edgecolors='none', triangulate='bezier' )
    plt.colorbar()
    plt.xlim( 0, 1 )
    plt.ylim( 0, 1 )


@util.withrepr
def Gauss( center, width, height ):
  return lambda x: height * function.exp( -((x-center)/width)**2 )


def main( nelems=16, reynolds=2e3, bump=Gauss(.75,.25,.25), strong=False, tol=1e-8, timestep=0 ):

  verts = numpy.linspace( 0, 1, nelems+1 )
  domain, geom = mesh.rectilinear( [verts,verts] )
  #vspace = function.vectorize([ domain.splinefunc( degree=(2,1) ), domain.splinefunc( degree=(1,2) ) ])
  vx, vy = function.chain([
    domain.splinefunc( degree=(2,1), removedofs=((0,-1),None) ),
    domain.splinefunc( degree=(1,2), removedofs=(None,(0,-1)) )
  ])
  vspace = function.stack( [ vx, vy ], axis=1 )
  pspace = domain.splinefunc( degree=1 )

  if bump:
    x, y = geom
    geom = domain.projection( [ x, bump(x) * (1-y) + y ],
                onto=domain.splinefunc( degree=2 ).vector( 2 ), geometry=geom, ischeme='gauss9' )
    # piola
    J = function.localgradient( geom, domain.ndims )
    detJ = function.determinant( J )
    vspace = ( vspace[...,_,:] * J ).sum() / detJ
    pspace = pspace / detJ

  vspace, pspace, lspace = function.chain([ vspace, pspace, [1.] ])

  stress = 2 * vspace.symgrad(geom) - pspace[:,_,_] * function.eye( domain.ndims )

  A = function.outer( vspace.grad(geom), stress ).sum([2,3])
  A += function.outer( pspace, vspace.div(geom) )
  A += function.outer( lspace, pspace )
  A += function.outer( pspace, lspace )

  stokesmat = domain.integrate( A, geometry=geom, ischeme='gauss9', title='stokes matrix' )

  if strong:
    stokesrhs = 0
    cons = domain.boundary['top'].project( 1, geometry=geom, onto=vspace[:,0], ischeme='gauss3', title='top boundary' ) \
         | domain.boundary.project( 0, geometry=geom, onto=vspace, ischeme='gauss3', title='other boundary' )
  else:
    ALPHA = .01 * nelems * reynolds
    Utop = [1,0]
    weakterm = ALPHA * vspace - 2 * vspace.nsymgrad(geom)
    stokesmat += domain.boundary.integrate( function.outer( weakterm, vspace ).sum(), geometry=geom, ischeme='gauss9', title='weak bc stokes matrix' )
    stokesrhs = domain.boundary['top'].integrate( ( weakterm * Utop ).sum(), geometry=geom, ischeme='gauss9', title='weak bc rhs' )
    cons = None

  if timestep:
    inertia = (1./timestep) * function.outer( vspace ).sum()
    inertmat = domain.integrate( inertia, ischeme='gauss9', geometry=geom, title='adding inertia' )
    stokesmat += inertmat

  lhsdata = function.DummyArray( stokesmat.shape[1:] )
  velo = vspace.dot( lhsdata )
  velo.grad( geom )
  ugradu = ( vspace.grad(geom) * velo ).sum()
  convection = reynolds * function.outer( vspace, ugradu ).sum()

  lhs = stokesmat.solve( stokesrhs, constrain=cons, tol=1e-10, precon='spilu' )
  for iiter in util.iterate():
    lhsdata.update( lhs )
    makeplots( domain, geom, velo, pspace.dot(lhs), iiter )
    naviermat = domain.integrate( convection, ischeme='gauss9', geometry=geom, title='navstokes matrix' )
    matrix = stokesmat + naviermat
    if timestep:
      rhs = stokesrhs + inertmat.matvec( lhs )
    else:
      rhs = stokesrhs
      res = matrix.res( lhs, rhs, constrain=cons )
      log.info( 'residual:', res )
      if res < tol:
        break
    lhs[:] = matrix.solve( rhs, constrain=cons, tol=1e-10 )#, precon='spilu' )


util.run( main )
