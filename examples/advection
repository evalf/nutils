#! /usr/bin/python

from nutils import *


def makeplots( domain, geom, u, plt ):
  xp, up = domain.elem_eval( [ geom, u ], ischeme='bezier9', separate=True )
  if plt is True:
    plt = plot.PyPlot( 'solution', ndigits=4 )
  with plt:
    plt.mesh( xp, up )
    if domain.ndims == 2:
      plt.gca().set_aspect( 'equal' )
      plt.clim(0,1)
      plt.colorbar()
    else:
      plt.ylim( -.1, 1.1 )


def main( nelems=40, degree=1, timestep=.01, tol=1e-10, cg=False, alpha=.5, ndims=1, maxiter=-1, plt=True, tau=1 ):
  
  if ndims == 1:
    domain, geom = mesh.rectilinear( [numpy.linspace(0,1,nelems+1)], periodic=[0] )
    convec = numpy.array( [.5] )
    u = function.piecewise( geom[0], [.4,.6], 0, 1, 0 )
  elif ndims == 2:
    nodes = numpy.linspace( -1, 1, nelems+1 )
    domain, geom = mesh.rectilinear( [nodes,nodes] )
    x, y = geom
    convec = function.stack([ y, -x ])
    center0 = .5, 0
    width = .25
    u = function.exp( -( ( ( geom - center0 ) / width )**2 ).sum(-1) )
  else:
    raise Exception( 'not supported: ndims=%s' % ndims )

  if plt == 'video':
    plt = plot.PyPlotVideo( 'solution' )

  basis = domain.basis( 'spline' if cg else 'discont', degree=degree )
  lhs = domain.project( u, onto=basis, geometry=geom, ptype='convolute', ischeme='gauss5' )

  A1 = (1./timestep) * function.outer( basis )
  A2 = function.outer( ( basis[:,_] * -convec ).div(geom), basis )
  matrix1, matrix2 = domain.integrate( [ A1, A2 ], geometry=geom, ischeme='gauss5' )
  if not cg:
    upwind = alpha * function.sign( ( function.mean(convec) * geom.normal() ).sum(-1) )
    funcsp_cv = basis[:,_] * convec
    F = ( function.mean(funcsp_cv)
        + function.jump(funcsp_cv) * upwind ).dotnorm( geom )
    A2i = function.outer( function.jump(basis), F )
    matrix2i = domain.interfaces.integrate( A2i, geometry=geom, ischeme='gauss5' )
    matrix2 = matrix2 + matrix2i

  for itime in log.count( 'timestep' ):

    if plt:
      makeplots( domain, geom, basis.dot(lhs), plt )

    matrix = matrix1 + tau * matrix2
    rhs = matrix1.matvec(lhs) + (tau-1) * matrix2.matvec(lhs)
    lhs = matrix.solve( rhs )

    if itime == maxiter:
      break

  return rhs, lhs


def unittest():

  retvals = main( ndims=1, nelems=10, timestep=.01, degree=1, cg=False, maxiter=2, plt=False )
  assert debug.checkdata( retvals, '''
    eNolz9sNBSEIBNB2dhNIGF5iQbf/Fi6wXzOKxiPocUK89Dwh7j8uOhX3x5fYxWRLIvBjCBnybvGTPQKI
    1VO/Zhmzp+RSfdzIS89kSMWX2LxAX+lnj9okl2e/HMTwU1OOVU+SoOqTLageHOJ7RQbZYM9aLyNNtzhu
    DRhem5YZy2W0/GvWdb2A5ZYwqeXAlgsJXWbN2qlxskxYfN4AMEykLDd0PtrM/lFsCYkYb2/o5EvvH/rr
    Tcs=''' )

  retvals = main( ndims=1, nelems=10, timestep=.01, degree=1, cg=False, maxiter=2, plt=False, tau=.5 )
  assert debug.checkdata( retvals, '''
    eNotj1sOBCEIBK8zk2Bi8xIONPe/wgLuV5cB7RL0KMFeeh5mw7eCkL6/lbQAu5Bu/NWRzOOCukYB0+Kj
    8ifetQ4hCSkQ0tjZadg+uSGdgN+MrLlW0e73G7gnRod70yu75tBS5AUJOy1Zwrw5G1fo8SvMGGGrhjLZ
    5GE2vouTcUmO2AjDNwZsy9TXrfEsnfHL6AUlTdar5+oDxubtiTzRqdo/9to4bgMC5xYGX/GX3h8vo035''' )
  
  retvals = main( ndims=1, nelems=10, timestep=.01, degree=2, cg=False, maxiter=2, plt=False )
  assert debug.checkdata( retvals, '''
    eNotkdGtxTAIQ9dpJSKBgQAD3f1XeEBff3xKaMGO0GMk/tLzyE3+nSR4tBYdQS1IP6s3/HeE6aSzNQmF
    IhaESxaOe2kTyBK2ELwVpaM3sASLPlNSKawa8yririq+c9UcTfce3Zsar557sxudPIDRAnfjpWNmNaAp
    NnoZ/UXQQTkG4LoFLY2xe6TcBjqDMr1rXWP2awBM1rNb/ZuX7voIN3NNK7g+9xXGa/qgN1mSTPlKFhxf
    EFJRS3IngDHma7h32fdyia3v+l2v+YlRYi6pAzDHNprPpXinLTzacyMHJD0mAERtED1t9r7kPg3Zo6Gb
    TMgsM0kgY5299P4BmUR0Hw==''' )

  retvals = main( ndims=2, nelems=4, timestep=.01, degree=1, cg=False, maxiter=2, plt=False )
  assert debug.checkdata( retvals, '''
    eNpNU1uOLSAI285Moom8YUGz/y1cKOck96uKSJFWOj96yH7Pz88lF/u79M7VIu0VnesU/nfrXM5ILIQs
    ZsFFtjmszH83zi2ba3luEuWemb7J4kNeNddKy3FEzwkLYZ4UaVqmPbuRzoix05uSXFaDFPaGi+jloD7q
    RD/dcQ1SeZ9b06UOasx9P6Iug1GWg5aGvRcL6jb3YCDefKIxKMFb15KnnjHjvhCDJ0s7v0dI1Y+Q0+EC
    Ou0e05KT4ptn7hsXGjSjrce8/fn2qRqKPqNwrh77HgtCPt5hw0f/82U+//SjiJsv0mg06JsnppPX7zXU
    N8Oc/I0EM6/Evo3BLRmU11RdfzgLPNAaLlISHNA0GF97YjJi9NsAUaCK8Qy2i/Qgtyw9ebPQsq+hJL4+
    CPmYJKYwHEVqUCyLgTyubW62B6tcwQx8bhvaKk0MTdlxwF8TvRI02eaeeMpT7C3fp2kDFyc7Ai5TqTqz
    ltR9nhVj+eI14DzLjrNDMMJgWxCfUtqGHUHHCGM4PfZ0hX0CQUhmcC0MhIoWaP5dt8APRmCZN8xnw4ea
    wDrxWhgsQ/L9AlJgpLWESX06ytxOGEzEUdvRotb8UDtMsYzkO8VSTK3/Pb7i7/n9BwRU7UU=''' )

  retvals = main( ndims=2, nelems=3, timestep=.01, degree=2, cg=False, maxiter=2, plt=False )
  assert debug.checkdata( retvals, '''
    eNo1VMmNIDEITGdGsiVuTECTfwoLRe+jVQZjzqL5/Nhh/z0/P5fZ7e8ynf4q96QshZNG9mUddYtBZ4Nc
    QY3vsJj/3TyiGoNcug85641hZukq2AgvnsATv5DBx17wIGrwoLF2XrIpGI1LPkxKOFwVWqeqJHuXvHdm
    jric4l8iobgRn8Bx3IQHXz2BrFNKdILjwo9Q8iDT+B5ZoDclhz6nFTYVyiLRoLpD1lAH2spelousQBdg
    Mb+Ja+/5oIgp8sipF/Ef4oYV7pMN+hDk0WnQ6JUS+vDcdxmI1/Wijp7c5h0EPb/Jo/3S2LVetg6hajs9
    wg7kKgbm9Gfw0wcnUGL1TZaVKQbrZSDue8hfYuM/0a2nDPG7XvQ1lGGvX149OdTR5HQOsOx6vo8UM4ts
    qgYz2JIJ1lyLqWYUImvxBLyyZ1B4qOJCvGBpPPW2834CYjwZ6sxTk6ViPjDlvkfw1a0Hhk9r6tweBQ7N
    EZC6o27G+xSZz1SajzH7MNFCUIqLKy5ox39FCvO0SPDyWgUOPSA05LI6Dg8djolGaJmCytO6wkidYikT
    RktxAbXSCqOwXGr0toKKXMFAFV8q7GrcnX07cN01z+Ush9Ya0PaMOWKHnaiG623HkpHR1dqQzwNsbdIg
    5du/g4+GDnpW7RpcKYOl+Zbf88LexZviZt+GT43KQGel5X1CZtZvD759Jd69lOVlkqAGZweVBBOavar9
    L0j4/uJ2//X9b4o6SPh7fv8Bvb8n9g==''' )


util.run( main, unittest )
