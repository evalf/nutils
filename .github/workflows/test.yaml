name: test
on:
  pull_request:
  push:
    branches:
      - master
      - release/*
defaults:
  run:
    shell: bash
env:
  official_container_repository: ghcr.io/evalf/nutils
jobs:
  build-python-package:
    name: Build Python package
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install build dependencies
        run: python3 -m pip install setuptools wheel
      - name: Build package
        run: |
          # To make the wheels reproducible, set the timestamp of the (files in
          # the) generated wheels to the date of the commit.
          export SOURCE_DATE_EPOCH=`git show -s --format=%ct`
          python3 setup.py sdist bdist_wheel
      - name: Upload package artifacts
        uses: actions/upload-artifact@v2
        with:
          name: python-package
          path: dist/
          if-no-files-found: error
  test:
    needs: build-python-package
    name: 'Test os: ${{ matrix.os }}, py: ${{ matrix.python-version }}, matrix: ${{ matrix.matrix-backend }}, nprocs: ${{ matrix.nprocs }}, numpy: ${{ matrix.numpy-version }}'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # base
          - {os: ubuntu-latest , python-version: 3.8, matrix-backend: numpy, nprocs: 1, numpy-version: latest}
          # os
          - {os: windows-latest, python-version: 3.8, matrix-backend: numpy, nprocs: 1, numpy-version: latest}
          - {os: macos-latest  , python-version: 3.8, matrix-backend: numpy, nprocs: 1, numpy-version: latest}
          # python-version
          - {os: ubuntu-latest , python-version: 3.5, matrix-backend: numpy, nprocs: 1, numpy-version: latest}
          - {os: ubuntu-latest , python-version: 3.6, matrix-backend: numpy, nprocs: 1, numpy-version: latest}
          - {os: ubuntu-latest , python-version: 3.7, matrix-backend: numpy, nprocs: 1, numpy-version: latest}
          # matrix-backend
          - {os: ubuntu-latest , python-version: 3.8, matrix-backend: scipy, nprocs: 1, numpy-version: latest}
          - {os: ubuntu-latest , python-version: 3.8, matrix-backend: mkl  , nprocs: 1, numpy-version: latest}
          - {os: ubuntu-latest , python-version: 3.8, matrix-backend: mkl  , nprocs: 2, numpy-version: latest}
          # nprocs
          - {os: ubuntu-latest , python-version: 3.8, matrix-backend: numpy, nprocs: 2, numpy-version: latest}
          # numpy-version
          - {os: ubuntu-latest , python-version: 3.8, matrix-backend: numpy, nprocs: 1, numpy-version: 1.15  }
      fail-fast: false
    env:
      NUTILS_MATRIX: ${{ matrix.matrix-backend }}
      NUTILS_NPROCS: ${{ matrix.nprocs }}
      OMP_NUM_THREADS: 1
      VECLIB_MAXIMUM_THREADS: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Download Python package artifact
        uses: actions/download-artifact@v2
        with:
          name: python-package
          path: dist/
      # - name: Install Pytest
      #   run: python -um pip install pytest pytest-cov
      - name: Install Graphviz
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: sudo apt install -y graphviz
      - name: Install Nutils and dependencies
        id: install
        env:
          _os: ${{ matrix.os }}
          _matrix: ${{ matrix.matrix-backend }}
          _numpy: ${{ matrix.numpy-version }}
        run: |
          _deps="pytest pytest-cov coverage treelog stringly matplotlib pillow meshio"
          case "$_os" in
            windows-latest) _deps="$_deps psutil";;
          esac
          case "$_matrix" in
            scipy) _deps="$_deps scipy";;
            mkl) _deps="$_deps mkl";;
          esac
          case "$_numpy" in
            latest) _deps="$_deps numpy Sphinx scipy";;
            *) _deps="$_deps numpy==$_numpy";;
          esac
          python -um pip install --upgrade wheel
          python -um pip install --upgrade $_deps
          # Install Nutils from `dist` dir created in job
          # `build-python-package`.
          python -um pip install --no-index --find-links ./dist nutils
      - name: Get library directory
        id: get-lib-dir
        if: ${{ matrix.matrix-backend == 'mkl' }}
        run: python -um devtools.gha.get_lib_dir
      - name: Test
        env:
          PYTEST_ADDOPTS: "--color=yes"
          LD_LIBRARY_PATH: ${{ steps.get-lib-dir.outputs.libdir }}
        run: |
          mkdir testenv
          cp -r examples docs tests .coveragerc testenv
          cd testenv
          pytest --cov-report xml --cov=nutils tests/
          # python -um coverage run -m unittest -bq
      - name: Post-process coverage
        run: |
          mv testenv/.coverage .
          python -um devtools.gha.coverage_report_xml
      - name: Upload coverage
        uses: codecov/codecov-action@v1
  test-sphinx:
    name: Test building docs
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          python3 -um pip install setuptools wheel
          python3 -um pip install --upgrade .[docs]
      - name: Build docs
        run: python3 setup.py build_sphinx --nitpicky --warning-is-error --keep-going
