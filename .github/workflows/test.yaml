name: test
on:
  pull_request:
  push:
    branches:
      - master
      - release/*
defaults:
  run:
    shell: bash
env:
  official_container_repository: ghcr.io/evalf/nutils
jobs:
  build-python-package:
    name: 'Build Python package on ${{ matrix.os }}'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - {os: ubuntu-latest}
          - {os: macos-latest, build-args: --no-sdist}
          - {os: windows-latest, build-args: --no-sdist}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        if: matrix.os == 'windows-latest'
        with:
          python-version: '3.10'
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Build wheels
        uses: messense/maturin-action@v1
        with:
          args: --release ${{ matrix.build-args }}
      - name: Upload package artifacts
        uses: actions/upload-artifact@v2
        with:
          name: python-package
          path: target/wheels
          if-no-files-found: error
  test:
    needs: build-python-package
    name: 'Test ${{ matrix.name }}'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - {name: "baseline", os: ubuntu-latest, python-version: "3.10", matrix-backend: numpy, nprocs: 1}
          - {name: "windows", os: windows-latest, python-version: "3.10", matrix-backend: numpy, nprocs: 1}
          - {name: "macos", os: macos-latest, python-version: "3.10", matrix-backend: numpy, nprocs: 1}
          - {name: "python 3.7", os: ubuntu-latest, python-version: "3.7", matrix-backend: numpy, nprocs: 1}
          - {name: "python 3.8", os: ubuntu-latest, python-version: "3.8", matrix-backend: numpy, nprocs: 1}
          - {name: "python 3.9", os: ubuntu-latest, python-version: "3.9", matrix-backend: numpy, nprocs: 1}
          - {name: "scipy matrix", os: ubuntu-latest, python-version: "3.10", matrix-backend: scipy, nprocs: 1}
          - {name: "mkl matrix", os: ubuntu-latest, python-version: "3.10", matrix-backend: mkl, nprocs: 1}
          - {name: "mkl matrix parallel", os: ubuntu-latest, python-version: "3.10", matrix-backend: mkl, nprocs: 2}
          - {name: "parallel", os: ubuntu-latest, python-version: "3.10", matrix-backend: numpy, nprocs: 2}
          - {name: "numpy 1.17", os: ubuntu-latest, python-version: "3.7", matrix-backend: numpy, nprocs: 1, numpy-version: ==1.17}
      fail-fast: false
    env:
      NUTILS_MATRIX: ${{ matrix.matrix-backend }}
      NUTILS_NPROCS: ${{ matrix.nprocs }}
      NUTILS_DEBUG: all
      OMP_NUM_THREADS: 1
      VECLIB_MAXIMUM_THREADS: 1
      MKL_DYNAMIC: FALSE
      MKL_NUM_THREADS: 1
      PYTHONHASHSEED: 0
      NUTILS_TENSORIAL: ${{ matrix.tensorial }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Move nutils directory
        run: mv nutils _nutils
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Download Python package artifact
        uses: actions/download-artifact@v2
        with:
          name: python-package
          path: dist/
      - name: Install Graphviz
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: sudo apt install -y graphviz
      - name: Install Nutils and dependencies
        id: install
        env:
          _numpy_version: ${{ matrix.numpy-version }}
        run: |
          python -um pip install --upgrade --upgrade-strategy eager wheel
          python -um pip install --upgrade --upgrade-strategy eager coverage treelog stringly meshio numpy$_numpy_version
          # Install Nutils from `dist` dir created in job `build-python-package`.
          python -um pip install --no-index --find-links ./dist --only-binary :all: nutils
      - name: Install Scipy
        if: ${{ matrix.matrix-backend == 'scipy' }}
        run: python -um pip install --upgrade --upgrade-strategy eager scipy
      - name: Configure MKL
        if: ${{ matrix.matrix-backend == 'mkl' }}
        run: |
          python -um pip install --upgrade --upgrade-strategy eager mkl
          python -um devtools.gha.configure_mkl
      - name: Test
        run: python -um coverage run -m unittest discover -b -q -t . -s tests
      - name: Post-process coverage
        run: python -um devtools.gha.coverage_report_xml
      - name: Upload coverage
        uses: codecov/codecov-action@v1
  test-examples:
    needs: build-python-package
    name: 'Test examples ${{ matrix.os }}'
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [ubuntu, macos, windows]
      fail-fast: false
    env:
      NUTILS_MATRIX: scipy
      NUTILS_NPROCS: 1
      NUTILS_DEBUG: all
      OMP_NUM_THREADS: 1
      VECLIB_MAXIMUM_THREADS: 1
      PYTHONHASHSEED: 0
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Move nutils directory
        run: mv nutils _nutils
      - name: Set up Python
        uses: actions/setup-python@v1
      - name: Download Python package artifact
        uses: actions/download-artifact@v2
        with:
          name: python-package
          path: dist/
      - name: Install Nutils and dependencies
        id: install
        run: |
          python -um pip install --upgrade --upgrade-strategy eager wheel
          python -um pip install --upgrade --upgrade-strategy eager treelog stringly matplotlib scipy pillow numpy git+https://github.com/evalf/nutils-SI.git
          # Install Nutils from `dist` dir created in job `build-python-package`.
          python -um pip install --no-index --find-links ./dist --only-binary :all: nutils
      - name: Test
        run: python -um unittest discover -b -q -t . -s examples
  test-sphinx:
    name: Test building docs
    needs: build-python-package
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Move nutils directory
        run: mv nutils _nutils
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Download Python package artifact
        uses: actions/download-artifact@v2
        with:
          name: python-package
          path: dist/
      - name: Install Nutils and dependencies
        id: install
        env:
          _numpy_version: ${{ matrix.numpy-version }}
        run: |
          python -um pip install --upgrade --upgrade-strategy eager wheel
          python -um pip install --upgrade --upgrade-strategy eager Sphinx treelog stringly meshio numpy scipy matplotlib
          # Install Nutils from `dist` dir created in job `build-python-package`.
          python -um pip install --no-index --find-links ./dist --only-binary :all: nutils
      - name: Build docs
        run: python3 -m sphinx -n -W --keep-going docs build/sphinx
  build-and-test-container-image:
    name: Build container image
    needs: build-python-package
    runs-on: ubuntu-20.04
    env:
      # Fixes https://github.com/actions/virtual-environments/issues/3080
      STORAGE_OPTS: overlay.mount_program=/usr/bin/fuse-overlayfs
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download Python package artifact
        uses: actions/download-artifact@v2
        with:
          name: python-package
          path: dist/
      - name: Get base and image tags
        id: tags
        run: python3 -um devtools.gha.get_base_and_image_tags
      - name: Pull container base image
        env:
          _base: ${{ env.official_container_repository }}:${{ steps.tags.outputs.base }}
        run: podman pull "docker://$_base"
      - name: Build container image
        id: build
        env:
          _base: ${{ env.official_container_repository }}:${{ steps.tags.outputs.base }}
          _name: ${{ env.official_container_repository }}:${{ steps.tags.outputs.image }}
        run: python3 -um devtools.container.build --build-from-worktree --name "$_name" --base "$_base"
      - name: Test examples/laplace.py
        env:
          _image: ${{ steps.build.outputs.id }}
        run: |
          mkdir /tmp/log
          podman run --pull=never --rm -v /tmp/log:/log:rw "$_image" laplace
          if [ ! -e /tmp/log/log.html ]; then
            echo ::error ::"log file not generated"
            exit 1
          fi
      - name: Run unit tests
        env:
          _image: ${{ steps.build.outputs.id }}
        run: podman run --pull=never --rm -v "$PWD/tests:/app/tests:ro" -v "$PWD/examples:/app/examples:ro" --env NUTILS_DEBUG=all "$_image" -m unittest -bq
      - name: Push image to container registry
        if: ${{ github.event_name == 'push' }}
        env:
          _username: ${{ secrets.DOCKER_USERNAME }}
          _password: ${{ secrets.DOCKER_PASSWORD }}
          _repository: ${{ secrets.DOCKER_REPOSITORY }}
          _image_id: ${{ steps.build.outputs.id }}
          _tag: ${{ steps.tags.outputs.image }}
        run: |
          # Push the image to the official container repository if this
          # workflow is triggered from the official git repository, otherwise
          # use the `DOCKER_REPOSITORY` secret.
          case "$GITHUB_REPOSITORY" in
            evalf/nutils)
              _repository="$official_container_repository"
              ;;
            *)
              if [ -z "$_repository" ]; then
                echo ::error ::"Github secret DOCKER_REPOSITORY is empty"
                exit 1
              fi
              ;;
          esac
          # Login without exposing the password via the command line as recommended by GitHub
          # (https://docs.github.com/en/free-pro-team@latest/actions/reference/encrypted-secrets#using-encrypted-secrets-in-a-workflow).
          printenv _password | podman login --username "$_username" --password-stdin "${_repository%%/*}"
          podman push "$_image_id" "docker://$_repository:$_tag"
