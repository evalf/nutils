# Stub file for the used portions of the gmsh API

from typing import Tuple, Protocol, NewType, NamedTuple, Sequence
from math import pi

Tag = NewType('Tag', int)
DimTags = Sequence[Tuple[int, Tag]]

class Affine(NamedTuple):
    xx: float; xy: float; xz: float; dx: float
    yx: float; yy: float; yz: float; dy: float
    zx: float; zy: float; zz: float; dz: float
    u1: float; u2: float; u3: float; u4: float
    @classmethod
    def shift(cls, dx: float, dy: float, dz: float):
        return cls(1., 0., 0., dx, 0., 1., 0., dy, 0., 0., 1., dz, 0., 0., 0., 1.)

class OCC(Protocol):
    # https://gmsh.info/doc/texinfo/gmsh.html#Namespace-gmsh_002fmodel_002focc
    def addRectangle(self, x: float, y: float, z: float, dx: float, dy: float, tag: Tag = Tag(-1), roundedRadius: float = 0.) -> Tag: ...
    def addDisk(self, xc: float, yc: float, zc: float, rx: float, ry: float) -> Tag: ...
    def addPoint(self, x: float, y: float, z: float, meshSize: float = 0., tag: Tag = Tag(-1)) -> Tag: ...
    def addLine(self, startTag: Tag, endTag: Tag, tag: Tag = Tag(-1)) -> Tag: ...
    def addCircleArc(self, startTag: Tag, centerTag: Tag, endTag: Tag, tag: Tag = Tag(-1), nx: float = 0., ny: float = 0., nz: float = 0.) -> Tag: ...
    def addCurveLoop(self, curveTags: Sequence[Tag], tag: Tag = Tag(-1)) -> Tag: ...
    def addPlaneSurface(self, wireTags: Sequence[Tag], tag: Tag = Tag(-1)) -> Tag: ...
    def addBox(self, x: float, y: float, z: float, dx: float, dy: float, dz: float) -> Tag: ...
    def addCylinder(self, x: float, y: float, z: float, dx: float, dy: float, dz: float, r: float) -> Tag: ...
    def addSphere(self, xc: float, yc: float, zc: float, radius: float, tag: Tag = Tag(-1), angle1: float = pi/2, angle2: float = pi/2, angle3: float = 2*pi) -> Tag: ...
    def addWire(self, curveTags: Sequence[Tag], tag: Tag = Tag(-1), checkClosed: bool = False) -> Tag: ...
    def addPipe(self, dimTags: DimTags, wiretag: Tag, trihedron: str = "") -> DimTags: ...
    def rotate(self, dimTags: DimTags, x: float, y: float, z: float, ax: float, ay: float, az: float, angle: float) -> Tag: ...
    def fuse(self, objectDimTags: DimTags, toolDimTags: DimTags, tag: Tag = Tag(-1), removeObject: bool = True, removeTool: bool = True) -> Tuple[DimTags, Sequence[DimTags]]: ...
    def cut(self, objectDimTags: DimTags, toolDimTags: DimTags, tag: Tag = Tag(-1), removeObject: bool = True, removeTool: bool = True) -> Tuple[DimTags, Sequence[DimTags]]: ...
    def intersect(self, objectDimTags: DimTags, toolDimTags: DimTags, tag: Tag = Tag(-1), removeObject: bool = True, removeTool: bool = True) -> Tuple[DimTags, Sequence[DimTags]]: ...
    def revolve(self, dimTags: DimTags, x: float, y: float, z: float, ax: float, ay: float, az: float, angle: float) -> DimTags: ...
    def translate(self, dimTags: DimTags, dx: float, dy: float, dz: float) -> None: ...
    def fragment(self, objectDimTags: DimTags, toolDimTags: Sequence[Tag], tag: Tag = Tag(-1), removeObject: bool = True, removeTool: bool = True) -> Tuple[Sequence[Tag],Sequence[DimTags]]: ...
    def synchronize(self) -> None: ...

class Mesh(Protocol):
    # https://gmsh.info/doc/texinfo/gmsh.html#Namespace-gmsh_002fmodel_002fmesh
    def setPeriodic(self, dim: int, tags: Sequence[Tag], tagsMaster: Sequence[Tag], affineTransform: 'Affine') -> None: ...
    def generate(self, dim: int = 3) -> None: ...

class Model(Protocol):
    # https://gmsh.info/doc/texinfo/gmsh.html#Namespace-gmsh_002fmodel
    occ: OCC
    mesh: Mesh
    def addPhysicalGroup(self, dim: int, tags: Sequence[Tag], tag: Tag = Tag(-1), name: str = '') -> Tag: ...
    def setPhysicalName(self, dim: int, tag: Tag, name: str) -> None: ...
    def getBoundary(self, dimTags: DimTags, combined: bool = True, oriented: bool = True, recursive: bool = False) -> DimTags: ...
    def removeEntities(self, dimTags: DimTags, recursive: bool = False) -> None: ...
