# Copyright (c) 2014 Evalf
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import inspect
import pathlib
import shutil
import os
import docutils.nodes
import docutils.parsers.rst
import sphinx.util.logging

project_root = pathlib.Path(__file__).parent.parent.resolve()


def process_signature(self, objtype, fullname, object, options, args, retann):
    if objtype in ('function', 'class', 'method'):
        try:
            signature = inspect.signature(object)
        except ValueError:
            # Some builtins have no signature.
            return
    else:
        return
    # Drop annotations from signature.
    signature = signature.replace(parameters=(param.replace(annotation=param.empty) for param in signature.parameters.values()),
                                  return_annotation=inspect.Signature.empty)
    # Return a string representation of args and of the return annotation.  Note
    # that `str(signature)` would have included the return annotation if we
    # hadn't removed it above.
    return str(signature).replace('\\', '\\\\'), ''


def print_rst_autogen_header(*, file, src=None):
    print('..', file=file)
    print('   Automatically generated.  Edits are futile.', file=file)
    print(file=file)
    print(':autogenerated:', file=file)
    print(':orphan:', file=file)
    if src is not None:
        abssrc = src.resolve().relative_to(project_root)
        print(':autogeneratedfrom: {}'.format(abssrc), file=file)
    print(file=file)


def print_rst_h1(text, *, file):
    assert '\n' not in text
    print(file=file)
    print(text, file=file)
    print('='*len(text), file=file)
    print(file=file)


def copy_utime(src, dst):
    stat = os.stat(str(src))
    os.utime(str(dst), ns=(stat.st_atime_ns, stat.st_mtime_ns))


def generate_api(app):
    nutils = project_root/'nutils'
    dst_root = pathlib.Path(app.srcdir)/'nutils'
    dst_root.mkdir(parents=True, exist_ok=True)

    srcs = tuple(f for f in sorted(nutils.glob('**/*.py')) if f != nutils/'__init__.py' and (f.name == '__init__.py' or not f.name.startswith('_')))
    for src in sphinx.util.display.status_iterator(srcs, 'generating api... ', 'purple', len(srcs), app.verbosity):
        module = '.'.join((src.parent if src.name == '__init__.py' else src.with_suffix('')).relative_to(nutils).parts)
        dst = dst_root/(module+'.rst')
        with dst.open('w', encoding='utf-8') as f:
            print_rst_autogen_header(file=f, src=src)
            print_rst_h1(module, file=f)
            print('.. automodule:: {}'.format('nutils.{}'.format(module)), file=f)
        copy_utime(src, dst)


def remove_generated(app, exception):
    logger = sphinx.util.logging.getLogger(__name__)
    generated = pathlib.Path(app.srcdir)/'nutils'
    shutil.rmtree(str(generated), onerror=lambda f, p, e: logger.warning('failed to remove {}'.format(p)))


class RequiresNode(docutils.nodes.Admonition, docutils.nodes.TextElement):
    pass


def html_visit_requires(self, node):
    self.body.append(self.starttag(node, 'div', CLASS='requires'))


def html_depart_requires(self, node):
    self.body.append('</div>\n')


def text_visit_requires(self, node):
    self.new_state(0)


def text_depart_requires(self, node):
    self.end_state()


class RequiresDirective(docutils.parsers.rst.Directive):

    has_content = False
    required_arguments = 1
    optional_arguments = 0

    def run(self):
        requires = tuple(name.strip() for name in self.arguments[0].split(','))

        node = RequiresNode('requires')
        node.document = self.state.document
        sphinx.util.nodes.set_source_info(self, node)
        msg = 'Requires {}.'.format(', '.join(requires))
        node.append(docutils.nodes.paragraph('', docutils.nodes.Text(msg, msg), translatable=False))
        return [node]


def fix_testcase_reference(app, env, node, contnode):
    if node['reftarget'] == 'unittest.case.TestCase':
        node = node.deepcopy()
        node['reftarget'] = 'unittest.TestCase'
        return app.emit_firstresult('missing-reference', env, node, contnode)


def setup(app):
    app.connect('autodoc-process-signature', process_signature)

    app.connect('builder-inited', generate_api)

    app.add_node(RequiresNode,
                 html=(html_visit_requires, html_depart_requires),
                 text=(text_visit_requires, text_depart_requires))
    app.add_directive('requires', RequiresDirective)

    app.connect('build-finished', remove_generated)

    app.connect('missing-reference', fix_testcase_reference)

    app.add_css_file('mods.css')

# vim: sts=2:sw=2:et
