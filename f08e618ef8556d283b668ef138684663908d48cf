NEW: Matrix backends, MKL backend, Pardiso solver

Formerly, all matrix objects generated by Topology.integrate were based on
scipy's sparse matrix module, with matching solvers and preconditioners. A
dense matrix implementation based on numpy arrays was available via the
`force_dense` argument, but with the addition of abstraction layers such as the
solver module this option had technically become defunct.

With the introduction of matrix backends, the type of desired matrix is
configured globally using either the `with matrix.backend(...)` context or with
the `--matrix=...` command line switch. Currently implemented are "scipy" (the
former default), "numpy" (the former result of `force_dense`) and "mkl", a
newly added interface of Intel's Math Kernel Library. The default value is
"mkl,scipy,numpy" meaning that MKL is used if it is available on the system,
or otherwise scipy, or otherwise numpy, in that order.

The MKL backend provides (and defaults to) the Pardiso direct sparse solver,
which runs in parallel (times `nprocs`) and is much more performant than
scipy's spsolve. Note however that at present no iterative solvers are
interfaced, so if these are required then a manual override to the "scipy"
backend is needed. This situation will change in the near future.

To make use of the "mkl" backend, Intel's MKL libraries need to be installed on
the system. This can be done in many different ways, of which below are a few:

Suggestion 1: follow the installation guide

  https://software.intel.com/en-us/articles/intel-math-kernel-library-intel-mkl-2018-install-guide

Suggestion 2: on debian-based systems, install system-wide via apt (as root)

  $ wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB
  $ apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB
  $ echo deb https://apt.repos.intel.com/mkl all main > /etc/apt/sources.list.d/intel-mkl.list
  $ apt-get update
  $ apt-get install intel-mkl-2018.1-038
  $ echo /opt/intel/lib/intel64 > /etc/ld.so.conf.d/mkl.conf
  $ echo /opt/intel/mkl/lib/intel64 >> /etc/ld.so.conf.d/mkl.conf
  $ ldconfig

Suggestion 3: on any linux system, install locally via pip

  $ pip3 install mkl
  $ export LD_LIBRARY_PATH=$HOME/.local/lib:$LD_LIBRARY_PATH

To confirm that MKL is installed and active run any example script and look for
"solving ... system using MKL Pardiso" in the logs.
